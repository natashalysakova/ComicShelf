@page
@model ComicShelf.Pages.SeriesNs.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Series</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Series.Name" class="control-label"></label>
                <input asp-for="Series.Name" class="form-control" />
                <span asp-validation-for="Series.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Series.OriginalName" class="control-label"></label>
                <input asp-for="Series.OriginalName" class="form-control" />
                <span asp-validation-for="Series.OriginalName" class="text-danger"></span>
            </div>
@*            <div class="form-group">
                <label asp-for="NewPublisher" class="control-label"></label>
                <input asp-for="NewPublisher" class="form-control" placeholder="New publisher" />
                <span asp-validation-for="NewPublisher" class="text-danger"></span>
                <span>or select existing</span>
                <select asp-for="Series.PublishersIds" class="form-select" asp-items="@Model.AvailablePublishers" multiple data-"></select>
                <span asp-validation-for="Series.PublishersIds" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                <label asp-for="Series.Publishers" class="control-label"></label>
                <input asp-for="Series.Publishers" class="form-control" type="text" placeholder="Input your keyword" />
                <span asp-validation-for="Series.Publishers" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Series.Type" class="control-label"></label>
                <select asp-for="Series.Type" class="form-select" asp-items="@Model.Types"></select>
                <span asp-validation-for="Series.Type" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Series.Ongoing" onchange="ongoingChanged()" /> @Html.DisplayNameFor(model => model.Series.Ongoing)
                </label>
            </div>
            <div class="form-group" id="totalIssues">
                <label asp-for="Series.TotalIssues" class="control-label"></label>
                <input asp-for="Series.TotalIssues" class="form-control" type="number"/>
                <span asp-validation-for="Series.TotalIssues" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        $.validator.addMethod("reqif",
            function (value, element, parameters) {
                var onging = $("#Series_Onging").is(":checked");
                return onging == false;
            });

        $.validator.unobtrusive.adapters.add("reqif", [], function (options) {
            options.rules.reqif = {};
            options.messages["reqif"] = options.message;
        });

        $(function(){

            ongoingChanged();

            function split( val ) {
              return val.split( /,\s*/ );
            }
            function extractLast( term ) {
              return split( term ).pop();
            }

            $('#Series_Publishers').autocomplete({
                minLength: 0,
                source: function( request, response ) {
                  $.getJSON( "Create?handler=Search", {
                    term: extractLast( request.term )
                  }, response );
                },
                focus: function() {
                  // prevent value inserted on focus
                  return false;
                },
                select: function( event, ui ) {
                    var terms = split( this.value );
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push( ui.item.value );
                    // add placeholder to get the comma-and-space at the end
                    terms.push( "" );
                    this.value = terms.join( ", " );
                    return false;
                }
            })

            .on( "keydown", function( event ) {
                if ( event.keyCode === $.ui.keyCode.TAB &&
                    $( this ).autocomplete( "instance" ).menu.active ) {
                  event.preventDefault();
                }
              })


        })



        //$(document).ready(function () {
        //    $("#productName").autocomplete({
        //        minLength: 2,
        //        source: function (request, response) {
        //            console.log("in funct");
        //            $.ajax({
        //                    url: "Create?handler=Search",
        //                    data: ({ term: request.term}),
        //                    dataType: "json",
        //                    type: "GET",
        //                    contentType: "application/json; charset=utf-8",
        //                    success: function (data) {
        //                    console.log("success");
        //                    response($.map(data, function (item) {
        //                        console.log("response"+item)
        //                        return item;
        //                    }))
        //                    }
                            
        //            });
        //        },
        //        select: function (e, i) {
        //            $("#productName").val(i.item.val);
        //        },
        //        minLength: 0
        //    }).focus(function () {
        //        $(this).autocomplete("search");
        //    });
        //});
    </script>
}
